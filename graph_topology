pip install igraph

import igraph
import pandas as pd
import numpy as np

from igraph import *

def excel_to_graph(path):
  df = pd.read_excel(path, sheet_name = 1)

  max_vertex = max(df['Source'].max(), df['Destination'].max())

  adjacency_matrix = np.zeros((max_vertex, max_vertex))

  for index, row in df.iterrows():
    start_vertex = row['Source'] - 1
    end_vertex = row['Destination'] - 1
    weight = row['Computed Length (km)']
    adjacency_matrix[start_vertex][end_vertex] = weight
    adjacency_matrix[end_vertex][start_vertex] = weight

  return adjacency_matrix

def find_graph_topology(graph):
  num_nodes = graph.vcount()
  num_edges = graph.ecount()
  avg_degree = mean(graph.degree())
  diameter = graph.diameter()
  edge_density = graph.density()
  avg_shortest_path_length = graph.average_path_length()
  avg_clustering_coefficient = graph.transitivity_undirected()
  return [num_nodes, num_edges, avg_degree, diameter, edge_density, avg_shortest_path_length, avg_clustering_coefficient]

excel_file_path = 'TOP_97_SANET.xlsx'
adjacency_matrix = excel_to_graph(excel_file_path)

graph = igraph.Graph.Weighted_Adjacency(adjacency_matrix, mode = 'undirected')

output = find_graph_topology(graph)
labels = ['Number of Nodes: ', 'Number of Edges: ', 'Average Node Degree: ', 'Diameter(hops): ', 'Edge Density (Physical Connectivity): ', 'Average Shortest Path Length (Hops): ', 'Average Clustering Coefficient: ']
for i in range(len(labels)):
  print(labels[i], output[i])
